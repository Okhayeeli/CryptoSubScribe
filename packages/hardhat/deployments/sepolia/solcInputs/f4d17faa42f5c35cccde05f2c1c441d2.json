{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SubscriptionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SubscriptionManager is Ownable {\n\n    struct Subscription {\n        uint256 id;\n        string name;\n        uint256 price;\n        uint256 duration;\n    }\n\n    struct Channel {\n        address user;\n        uint256 balance;\n        uint256 lastSettled;\n        mapping(uint256 => bool) activeSubscriptions;\n    }\n\n    mapping(uint256 => Subscription) public subscriptions;\n    mapping(address => Channel) public channels;\n    uint256 public subscriptionCount;\n\n    event SubscriptionAdded(uint256 id, string name, uint256 price, uint256 duration);\n    event ChannelOpened(address indexed user, uint256 balance);\n    event ChannelClosed(address indexed user, uint256 finalBalance);\n    event Withdraw(address indexed owner, uint256 amount);\n    event SubscriptionActivated(address indexed user, uint256 subscriptionId);\n\n    function openChannel() external payable {\n        require(channels[msg.sender].user == address(0), \"Channel already exists\");\n        Channel storage channel = channels[msg.sender];\n        channel.user = msg.sender;\n        channel.balance = msg.value;\n        channel.lastSettled = block.timestamp;\n        emit ChannelOpened(msg.sender, msg.value);\n    }\n\n    function closeChannel() external {\n        Channel storage channel = channels[msg.sender];\n        require(channel.user != address(0), \"Channel does not exist\");\n\n        uint256 toTransfer = channel.balance;\n        require(address(this).balance >= toTransfer, \"Insufficient contract balance\");\n\n        payable(msg.sender).transfer(toTransfer);\n        emit ChannelClosed(msg.sender, toTransfer);\n        delete channels[msg.sender];\n    }\n\n    function addSubscription(string memory name, uint256 price, uint256 duration) external onlyOwner {\n        uint256 newId = subscriptionCount;\n        subscriptions[newId] = Subscription(newId, name, price, duration);\n        subscriptionCount++;\n        emit SubscriptionAdded(newId, name, price, duration);\n    }\n\n    function getAllSubscriptions() external view returns (Subscription[] memory) {\n        Subscription[] memory allSubscriptions = new Subscription[](subscriptionCount);\n        \n        for (uint256 i = 0; i < subscriptionCount; i++) {\n            allSubscriptions[i] = subscriptions[i];\n        }\n        \n        return allSubscriptions;\n    }\n\n    function activateSubscription(uint256 subscriptionId) external {\n    require(channels[msg.sender].user != address(0), \"Channel does not exist\");\n    require(subscriptionId < subscriptionCount, \"Invalid subscription ID\");\n    Subscription storage sub = subscriptions[subscriptionId];\n    require(channels[msg.sender].balance >= sub.price, \"Insufficient balance\");\n    \n    channels[msg.sender].balance -= sub.price;\n    channels[msg.sender].activeSubscriptions[subscriptionId] = true;\n    emit SubscriptionActivated(msg.sender, subscriptionId);\n    }\n\n\n    function activateSubscriptionsBatch(uint256[] calldata subscriptionIds) external {\n    require(channels[msg.sender].user != address(0), \"Channel does not exist\");\n    uint256 totalCost = 0;\n    \n       for (uint256 i = 0; i < subscriptionIds.length; i++) {\n          uint256 subscriptionId = subscriptionIds[i];\n          require(subscriptionId < subscriptionCount, \"Invalid subscription ID\");\n          Subscription storage sub = subscriptions[subscriptionId];\n           totalCost += sub.price;\n       }\n    \n    require(channels[msg.sender].balance >= totalCost, \"Insufficient balance\");\n    \n    channels[msg.sender].balance -= totalCost;\n    \n        for (uint256 i = 0; i < subscriptionIds.length; i++) {\n          uint256 subscriptionId = subscriptionIds[i];\n          channels[msg.sender].activeSubscriptions[subscriptionId] = true;\n          emit SubscriptionActivated(msg.sender, subscriptionId);\n       }\n    }\n\n    function getActiveSubscriptions(address user) external view returns (bool[] memory) {\n        require(channels[user].user != address(0), \"Channel does not exist\");\n\n        bool[] memory activeSubs = new bool[](subscriptionCount);\n        for (uint256 i = 0; i < subscriptionCount; i++) {\n            activeSubs[i] = channels[user].activeSubscriptions[i];\n        }\n\n        return activeSubs;\n    }\n\n    function getChannelBalance(address user) external view returns (uint256) {\n        require(channels[user].user != address(0), \"Channel does not exist\");\n        return channels[user].balance;\n    }\n\n    function withdraw(uint256 amount) external onlyOwner {\n        require(amount <= address(this).balance, \"Insufficient contract balance\");\n        payable(owner()).transfer(amount);\n        emit Withdraw(owner(), amount);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}