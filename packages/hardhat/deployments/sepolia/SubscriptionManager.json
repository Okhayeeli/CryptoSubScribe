{
  "address": "0x707BADcb6d42706A54A53a41804cE1c919E7a88b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalBalance",
          "type": "uint256"
        }
      ],
      "name": "ChannelClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ChannelOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "activateSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "addSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSettled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getActiveSubscriptions",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSubscriptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct SubscriptionManager.Subscription[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getChannelBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openChannel",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbecbf6ad1ef122dc63202c512122332aa2d23c3b7a16943fba5cf854bf2f795a",
  "receipt": {
    "to": null,
    "from": "0x3f662231cfaee0131b38C3E74A12C263Ed9C73b4",
    "contractAddress": "0x707BADcb6d42706A54A53a41804cE1c919E7a88b",
    "transactionIndex": 48,
    "gasUsed": "1067162",
    "logsBloom": "0x00000000000000000200000000000000000000000000000000800000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000020000010000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3e9068a7459c8bc5a552cbc6666a8c2a0bc645ea8bc1bd7345433ed918a4786c",
    "transactionHash": "0xbecbf6ad1ef122dc63202c512122332aa2d23c3b7a16943fba5cf854bf2f795a",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 6298191,
        "transactionHash": "0xbecbf6ad1ef122dc63202c512122332aa2d23c3b7a16943fba5cf854bf2f795a",
        "address": "0x707BADcb6d42706A54A53a41804cE1c919E7a88b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f662231cfaee0131b38c3e74a12c263ed9c73b4"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x3e9068a7459c8bc5a552cbc6666a8c2a0bc645ea8bc1bd7345433ed918a4786c"
      }
    ],
    "blockNumber": 6298191,
    "cumulativeGasUsed": "5797466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c21d7a944c91eaae8ddf7651fc1dac7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"ChannelClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"SubscriptionActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SubscriptionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"activateSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSettled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getActiveSubscriptions\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSubscriptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct SubscriptionManager.Subscription[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getChannelBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubscriptionManager.sol\":\"SubscriptionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/SubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SubscriptionManager is Ownable {\\n    using ECDSA for bytes32;\\n\\n    struct Subscription {\\n        uint256 id;\\n        string name;\\n        uint256 price;\\n        uint256 duration;\\n    }\\n\\n    struct Channel {\\n        address user;\\n        uint256 balance;\\n        uint256 lastSettled;\\n        mapping(uint256 => bool) activeSubscriptions;\\n    }\\n\\n    mapping(uint256 => Subscription) public subscriptions;\\n    mapping(address => Channel) public channels;\\n    uint256 public subscriptionCount;\\n\\n    event SubscriptionAdded(uint256 id, string name, uint256 price, uint256 duration);\\n    event ChannelOpened(address indexed user, uint256 balance);\\n    event ChannelClosed(address indexed user, uint256 finalBalance);\\n    event Withdraw(address indexed owner, uint256 amount);\\n    event SubscriptionActivated(address indexed user, uint256 subscriptionId);\\n\\n    function openChannel() external payable {\\n        require(channels[msg.sender].user == address(0), \\\"Channel already exists\\\");\\n        Channel storage channel = channels[msg.sender];\\n        channel.user = msg.sender;\\n        channel.balance = msg.value;\\n        channel.lastSettled = block.timestamp;\\n        emit ChannelOpened(msg.sender, msg.value);\\n    }\\n\\n    function closeChannel() external {\\n        Channel storage channel = channels[msg.sender];\\n        require(channel.user != address(0), \\\"Channel does not exist\\\");\\n\\n        uint256 toTransfer = channel.balance;\\n        require(address(this).balance >= toTransfer, \\\"Insufficient contract balance\\\");\\n\\n        payable(msg.sender).transfer(toTransfer);\\n        emit ChannelClosed(msg.sender, toTransfer);\\n        delete channels[msg.sender];\\n    }\\n\\n    function addSubscription(string memory name, uint256 price, uint256 duration) external onlyOwner {\\n        uint256 newId = subscriptionCount;\\n        subscriptions[newId] = Subscription(newId, name, price, duration);\\n        subscriptionCount++;\\n        emit SubscriptionAdded(newId, name, price, duration);\\n    }\\n\\n    function getAllSubscriptions() external view returns (Subscription[] memory) {\\n        Subscription[] memory allSubscriptions = new Subscription[](subscriptionCount);\\n        \\n        for (uint256 i = 0; i < subscriptionCount; i++) {\\n            allSubscriptions[i] = subscriptions[i];\\n        }\\n        \\n        return allSubscriptions;\\n    }\\n\\n    function activateSubscription(uint256 subscriptionId, /* uint256 nonce, */ bytes memory signature) external {\\n        require(channels[msg.sender].user != address(0), \\\"Channel does not exist\\\");\\n        require(subscriptionId < subscriptionCount, \\\"Invalid subscription ID\\\");\\n        Subscription storage sub = subscriptions[subscriptionId];\\n        require(channels[msg.sender].balance >= sub.price, \\\"Insufficient balance\\\");\\n        \\n        \\n        require(signature.length == 65, \\\"Invalid signature length\\\");\\n        \\n        channels[msg.sender].balance -= sub.price;\\n        channels[msg.sender].activeSubscriptions[subscriptionId] = true;\\n        emit SubscriptionActivated(msg.sender, subscriptionId);\\n    }\\n\\n    function getActiveSubscriptions(address user) external view returns (bool[] memory) {\\n        require(channels[user].user != address(0), \\\"Channel does not exist\\\");\\n\\n        bool[] memory activeSubs = new bool[](subscriptionCount);\\n        for (uint256 i = 0; i < subscriptionCount; i++) {\\n            activeSubs[i] = channels[user].activeSubscriptions[i];\\n        }\\n\\n        return activeSubs;\\n    }\\n\\n    function getChannelBalance(address user) external view returns (uint256) {\\n        require(channels[user].user != address(0), \\\"Channel does not exist\\\");\\n        return channels[user].balance;\\n    }\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        payable(owner()).transfer(amount);\\n        emit Withdraw(owner(), amount);\\n    }\\n}\",\"keccak256\":\"0x75eeec38d7f5ae1fda98937172cd0abb3c4c23682e1774f8d6b850230330126e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111e28061007e6000396000f3fe6080604052600436106100dd5760003560e01c806371e537541161007f5780638da5cb5b116100595780638da5cb5b14610268578063b28aea5614610290578063c70eba2a146102a5578063f2fde38b146102d257600080fd5b806371e53754146101d45780637dce34f7146101f457806389be87a11461026057600080fd5b80632e1a7d4d116100bb5780632e1a7d4d1461015d5780633b2af31b1461017d57806356eb00a11461019d578063715018a6146101bf57600080fd5b80631176cd5f146100e2578063173b6d90146101045780632d5bbf601461012d575b600080fd5b3480156100ee57600080fd5b506101026100fd366004610d92565b6102f2565b005b34801561011057600080fd5b5061011a60035481565b6040519081526020015b60405180910390f35b34801561013957600080fd5b5061014d610148366004610ded565b6104c6565b6040516101249493929190610e4c565b34801561016957600080fd5b50610102610178366004610ded565b610576565b34801561018957600080fd5b50610102610198366004610e78565b610659565b3480156101a957600080fd5b506101b2610719565b6040516101249190610eda565b3480156101cb57600080fd5b506101026108a1565b3480156101e057600080fd5b5061011a6101ef366004610f65565b6108b5565b34801561020057600080fd5b5061023b61020f366004610f65565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169183565b604080516001600160a01b039094168452602084019290925290820152606001610124565b61010261090d565b34801561027457600080fd5b506000546040516001600160a01b039091168152602001610124565b34801561029c57600080fd5b506101026109cf565b3480156102b157600080fd5b506102c56102c0366004610f65565b610ae9565b6040516101249190610f95565b3480156102de57600080fd5b506101026102ed366004610f65565b610be3565b336000908152600260205260409020546001600160a01b03166103305760405162461bcd60e51b815260040161032790610fdb565b60405180910390fd5b60035482106103815760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606401610327565b6000828152600160208181526040808420600280820154338752935293209091015410156103e85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610327565b81516041146104395760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610327565b60028082015433600090815260209290925260408220600101805491929091610463908490611021565b9091555050336000818152600260209081526040808320878452600301825291829020805460ff1916600117905590518581527fea0cbd7c39a8a3c9a996c6ff5ee1f9ebbff1e0cfc5b78bdcef88806d888728e1910160405180910390a2505050565b6001602081905260009182526040909120805491810180546104e79061103a565b80601f01602080910402602001604051908101604052809291908181526020018280546105139061103a565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b5050505050908060020154908060030154905084565b61057e610c5c565b478111156105ce5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610327565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610607573d6000803e3d6000fd5b506000546001600160a01b03166001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161064e91815260200190565b60405180910390a250565b610661610c5c565b60035460408051608081018252828152602080820187815282840187905260608301869052600085815260019283905293909320825181559251919291908201906106ac90826110bd565b506040820151600282015560609091015160039182015580549060006106d18361117d565b91905055507fec23809d8beb703b3e88af245af5efaa3ff0ca228baf23d5acd4c60cc90538e18185858560405161070b9493929190610e4c565b60405180910390a150505050565b6060600060035467ffffffffffffffff81111561073857610738610d06565b60405190808252806020026020018201604052801561079457816020015b6107816040518060800160405280600081526020016060815260200160008152602001600081525090565b8152602001906001900390816107565790505b50905060005b60035481101561089b57600081815260016020818152604092839020835160808101909452805484529182018054918401916107d59061103a565b80601f01602080910402602001604051908101604052809291908181526020018280546108019061103a565b801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b505050505081526020016002820154815260200160038201548152505082828151811061087d5761087d611196565b602002602001018190525080806108939061117d565b91505061079a565b50919050565b6108a9610c5c565b6108b36000610cb6565b565b6001600160a01b038181166000908152600260205260408120549091166108ee5760405162461bcd60e51b815260040161032790610fdb565b506001600160a01b031660009081526002602052604090206001015490565b336000908152600260205260409020546001600160a01b03161561096c5760405162461bcd60e51b81526020600482015260166024820152754368616e6e656c20616c72656164792065786973747360501b6044820152606401610327565b3360008181526002602081815260409283902080546001600160a01b031916851781553460018201819055429382019390935592519182529192917faf952b0a28349f5ffff2d98aa9050ea845adbe423ff73ac5da5f268834ae3ac0910161064e565b33600090815260026020526040902080546001600160a01b0316610a055760405162461bcd60e51b815260040161032790610fdb565b600181015447811115610a5a5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610327565b604051339082156108fc029083906000818181858888f19350505050158015610a87573d6000803e3d6000fd5b5060405181815233907f770342ee36990141b5b1f4b3b41a184d7968647ac7f0dbfd2d86d566c468027d9060200160405180910390a25050336000908152600260208190526040822080546001600160a01b0319168155600181018390550155565b6001600160a01b0381811660009081526002602052604090205460609116610b235760405162461bcd60e51b815260040161032790610fdb565b600060035467ffffffffffffffff811115610b4057610b40610d06565b604051908082528060200260200182016040528015610b69578160200160208202803683370190505b50905060005b600354811015610bdc576001600160a01b0384166000908152600260209081526040808320848452600301909152902054825160ff90911690839083908110610bba57610bba611196565b9115156020928302919091019091015280610bd48161117d565b915050610b6f565b5092915050565b610beb610c5c565b6001600160a01b038116610c505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610327565b610c5981610cb6565b50565b6000546001600160a01b031633146108b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610327565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610d3757610d37610d06565b604051601f8501601f19908116603f01168101908282118183101715610d5f57610d5f610d06565b81604052809350858152868686011115610d7857600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610da557600080fd5b82359150602083013567ffffffffffffffff811115610dc357600080fd5b8301601f81018513610dd457600080fd5b610de385823560208401610d1c565b9150509250929050565b600060208284031215610dff57600080fd5b5035919050565b6000815180845260005b81811015610e2c57602081850181015186830182015201610e10565b506000602082860101526020601f19601f83011685010191505092915050565b848152608060208201526000610e656080830186610e06565b6040830194909452506060015292915050565b600080600060608486031215610e8d57600080fd5b833567ffffffffffffffff811115610ea457600080fd5b8401601f81018613610eb557600080fd5b610ec486823560208401610d1c565b9660208601359650604090950135949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610f5757603f19898403018552815160808151855288820151818a870152610f2f82870182610e06565b838a0151878b0152606093840151939096019290925250509386019390860190600101610f01565b509098975050505050505050565b600060208284031215610f7757600080fd5b81356001600160a01b0381168114610f8e57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610fcf578351151583529284019291840191600101610fb1565b50909695505050505050565b60208082526016908201527510da185b9b995b08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156110345761103461100b565b92915050565b600181811c9082168061104e57607f821691505b60208210810361089b57634e487b7160e01b600052602260045260246000fd5b601f8211156110b857600081815260208120601f850160051c810160208610156110955750805b601f850160051c820191505b818110156110b4578281556001016110a1565b5050505b505050565b815167ffffffffffffffff8111156110d7576110d7610d06565b6110eb816110e5845461103a565b8461106e565b602080601f83116001811461112057600084156111085750858301515b600019600386901b1c1916600185901b1785556110b4565b600085815260208120601f198616915b8281101561114f57888601518255948401946001909101908401611130565b508582101561116d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161118f5761118f61100b565b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a3c37ff4e4db73c457dbbd47dc0dc552e760713b9da5b1e19211b5726b1fd93964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806371e537541161007f5780638da5cb5b116100595780638da5cb5b14610268578063b28aea5614610290578063c70eba2a146102a5578063f2fde38b146102d257600080fd5b806371e53754146101d45780637dce34f7146101f457806389be87a11461026057600080fd5b80632e1a7d4d116100bb5780632e1a7d4d1461015d5780633b2af31b1461017d57806356eb00a11461019d578063715018a6146101bf57600080fd5b80631176cd5f146100e2578063173b6d90146101045780632d5bbf601461012d575b600080fd5b3480156100ee57600080fd5b506101026100fd366004610d92565b6102f2565b005b34801561011057600080fd5b5061011a60035481565b6040519081526020015b60405180910390f35b34801561013957600080fd5b5061014d610148366004610ded565b6104c6565b6040516101249493929190610e4c565b34801561016957600080fd5b50610102610178366004610ded565b610576565b34801561018957600080fd5b50610102610198366004610e78565b610659565b3480156101a957600080fd5b506101b2610719565b6040516101249190610eda565b3480156101cb57600080fd5b506101026108a1565b3480156101e057600080fd5b5061011a6101ef366004610f65565b6108b5565b34801561020057600080fd5b5061023b61020f366004610f65565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169183565b604080516001600160a01b039094168452602084019290925290820152606001610124565b61010261090d565b34801561027457600080fd5b506000546040516001600160a01b039091168152602001610124565b34801561029c57600080fd5b506101026109cf565b3480156102b157600080fd5b506102c56102c0366004610f65565b610ae9565b6040516101249190610f95565b3480156102de57600080fd5b506101026102ed366004610f65565b610be3565b336000908152600260205260409020546001600160a01b03166103305760405162461bcd60e51b815260040161032790610fdb565b60405180910390fd5b60035482106103815760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606401610327565b6000828152600160208181526040808420600280820154338752935293209091015410156103e85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610327565b81516041146104395760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610327565b60028082015433600090815260209290925260408220600101805491929091610463908490611021565b9091555050336000818152600260209081526040808320878452600301825291829020805460ff1916600117905590518581527fea0cbd7c39a8a3c9a996c6ff5ee1f9ebbff1e0cfc5b78bdcef88806d888728e1910160405180910390a2505050565b6001602081905260009182526040909120805491810180546104e79061103a565b80601f01602080910402602001604051908101604052809291908181526020018280546105139061103a565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b5050505050908060020154908060030154905084565b61057e610c5c565b478111156105ce5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610327565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610607573d6000803e3d6000fd5b506000546001600160a01b03166001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161064e91815260200190565b60405180910390a250565b610661610c5c565b60035460408051608081018252828152602080820187815282840187905260608301869052600085815260019283905293909320825181559251919291908201906106ac90826110bd565b506040820151600282015560609091015160039182015580549060006106d18361117d565b91905055507fec23809d8beb703b3e88af245af5efaa3ff0ca228baf23d5acd4c60cc90538e18185858560405161070b9493929190610e4c565b60405180910390a150505050565b6060600060035467ffffffffffffffff81111561073857610738610d06565b60405190808252806020026020018201604052801561079457816020015b6107816040518060800160405280600081526020016060815260200160008152602001600081525090565b8152602001906001900390816107565790505b50905060005b60035481101561089b57600081815260016020818152604092839020835160808101909452805484529182018054918401916107d59061103a565b80601f01602080910402602001604051908101604052809291908181526020018280546108019061103a565b801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b505050505081526020016002820154815260200160038201548152505082828151811061087d5761087d611196565b602002602001018190525080806108939061117d565b91505061079a565b50919050565b6108a9610c5c565b6108b36000610cb6565b565b6001600160a01b038181166000908152600260205260408120549091166108ee5760405162461bcd60e51b815260040161032790610fdb565b506001600160a01b031660009081526002602052604090206001015490565b336000908152600260205260409020546001600160a01b03161561096c5760405162461bcd60e51b81526020600482015260166024820152754368616e6e656c20616c72656164792065786973747360501b6044820152606401610327565b3360008181526002602081815260409283902080546001600160a01b031916851781553460018201819055429382019390935592519182529192917faf952b0a28349f5ffff2d98aa9050ea845adbe423ff73ac5da5f268834ae3ac0910161064e565b33600090815260026020526040902080546001600160a01b0316610a055760405162461bcd60e51b815260040161032790610fdb565b600181015447811115610a5a5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610327565b604051339082156108fc029083906000818181858888f19350505050158015610a87573d6000803e3d6000fd5b5060405181815233907f770342ee36990141b5b1f4b3b41a184d7968647ac7f0dbfd2d86d566c468027d9060200160405180910390a25050336000908152600260208190526040822080546001600160a01b0319168155600181018390550155565b6001600160a01b0381811660009081526002602052604090205460609116610b235760405162461bcd60e51b815260040161032790610fdb565b600060035467ffffffffffffffff811115610b4057610b40610d06565b604051908082528060200260200182016040528015610b69578160200160208202803683370190505b50905060005b600354811015610bdc576001600160a01b0384166000908152600260209081526040808320848452600301909152902054825160ff90911690839083908110610bba57610bba611196565b9115156020928302919091019091015280610bd48161117d565b915050610b6f565b5092915050565b610beb610c5c565b6001600160a01b038116610c505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610327565b610c5981610cb6565b50565b6000546001600160a01b031633146108b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610327565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610d3757610d37610d06565b604051601f8501601f19908116603f01168101908282118183101715610d5f57610d5f610d06565b81604052809350858152868686011115610d7857600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215610da557600080fd5b82359150602083013567ffffffffffffffff811115610dc357600080fd5b8301601f81018513610dd457600080fd5b610de385823560208401610d1c565b9150509250929050565b600060208284031215610dff57600080fd5b5035919050565b6000815180845260005b81811015610e2c57602081850181015186830182015201610e10565b506000602082860101526020601f19601f83011685010191505092915050565b848152608060208201526000610e656080830186610e06565b6040830194909452506060015292915050565b600080600060608486031215610e8d57600080fd5b833567ffffffffffffffff811115610ea457600080fd5b8401601f81018613610eb557600080fd5b610ec486823560208401610d1c565b9660208601359650604090950135949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610f5757603f19898403018552815160808151855288820151818a870152610f2f82870182610e06565b838a0151878b0152606093840151939096019290925250509386019390860190600101610f01565b509098975050505050505050565b600060208284031215610f7757600080fd5b81356001600160a01b0381168114610f8e57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610fcf578351151583529284019291840191600101610fb1565b50909695505050505050565b60208082526016908201527510da185b9b995b08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156110345761103461100b565b92915050565b600181811c9082168061104e57607f821691505b60208210810361089b57634e487b7160e01b600052602260045260246000fd5b601f8211156110b857600081815260208120601f850160051c810160208610156110955750805b601f850160051c820191505b818110156110b4578281556001016110a1565b5050505b505050565b815167ffffffffffffffff8111156110d7576110d7610d06565b6110eb816110e5845461103a565b8461106e565b602080601f83116001811461112057600084156111085750858301515b600019600386901b1c1916600185901b1785556110b4565b600085815260208120601f198616915b8281101561114f57888601518255948401946001909101908401611130565b508582101561116d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161118f5761118f61100b565b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a3c37ff4e4db73c457dbbd47dc0dc552e760713b9da5b1e19211b5726b1fd93964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1734,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "subscriptions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Subscription)1718_storage)"
      },
      {
        "astId": 1739,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "channels",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Channel)1729_storage)"
      },
      {
        "astId": 1741,
        "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
        "label": "subscriptionCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Channel)1729_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SubscriptionManager.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)1729_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Subscription)1718_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionManager.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)1718_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Channel)1729_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionManager.Channel",
        "members": [
          {
            "astId": 1720,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1722,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1724,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "lastSettled",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1728,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "activeSubscriptions",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Subscription)1718_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionManager.Subscription",
        "members": [
          {
            "astId": 1711,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1713,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1715,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1717,
            "contract": "contracts/SubscriptionManager.sol:SubscriptionManager",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}